// CryptoJS code here
!function ($, x) { "object" == typeof exports ? module.exports = exports = x() : "function" == typeof define && define.amd ? define([], x) : $.CryptoJS4Storage = x() }(this, function () { var $, x, _, e, t, r, i, f, n, c, a, o, s, h, d, l, u, v, p, b, y, g, B, w, k, S, m, H, z, C, A, D, E, F, R, M, P, W, O, K, X, L, j, I, U, N, T, Z, q, G, J, Q, V, Y, $$, $x, $_, $e, $t, $r, $i, $f, $n, $c, $6, $a, $o, $0, $2, $s, $h, $d, $l, $4, $1, $3, $u, $v, $8, $p, $5, $b, $y, $g, $7, $B, $w, $k, $S, $m, $H, $z, $C, $A, $D, $E, $F, $R, $M, $P, $W, $O, $K, $X, $L, $j, $I, $U, $N, $T, $Z, $q, $G, $J, $9, $Q, $V, $Y, x$, xx = xx || ($ = Math, x = Object.create || function () { function $() { } return function (x) { var _; return $.prototype = x, _ = new $, $.prototype = null, _ } }(), t = (e = (_ = {}).lib = {}).Base = { extend: function ($) { var _ = x(this); return $ && _.mixIn($), _.hasOwnProperty("init") && this.init !== _.init || (_.init = function () { _.$super.init.apply(this, arguments) }), _.init.prototype = _, _.$super = this, _ }, create: function () { var $ = this.extend(); return $.init.apply($, arguments), $ }, init: function () { }, mixIn: function ($) { for (var x in $) $.hasOwnProperty(x) && (this[x] = $[x]); $.hasOwnProperty("toString") && (this.toString = $.toString) }, clone: function () { return this.init.prototype.extend(this) } }, r = e.WordArray = t.extend({ init: function ($, x) { $ = this.words = $ || [], void 0 != x ? this.sigBytes = x : this.sigBytes = 4 * $.length }, toString: function ($) { return ($ || f).stringify(this) }, concat: function ($) { var x = this.words, _ = $.words, e = this.sigBytes, t = $.sigBytes; if (this.clamp(), e % 4) for (var r = 0; r < t; r++) { var i = _[r >>> 2] >>> 24 - r % 4 * 8 & 255; x[e + r >>> 2] |= i << 24 - (e + r) % 4 * 8 } else for (var r = 0; r < t; r += 4)x[e + r >>> 2] = _[r >>> 2]; return this.sigBytes += t, this }, clamp: function () { var x = this.words, _ = this.sigBytes; x[_ >>> 2] &= 4294967295 << 32 - _ % 4 * 8, x.length = $.ceil(_ / 4) }, clone: function () { var $ = t.clone.call(this); return $.words = this.words.slice(0), $ }, random: function (x) { for (var _, e = [], t = function (x) { var x = x, _ = 987654321; return function () { var e = ((_ = 36969 * (65535 & _) + (_ >> 16) & 4294967295) << 16) + (x = 18e3 * (65535 & x) + (x >> 16) & 4294967295) & 4294967295; return e /= 4294967296, (e += .5) * ($.random() > .5 ? 1 : -1) } }, i = 0; i < x; i += 4) { var f = t(4294967296 * (_ || $.random())); _ = 987654071 * f(), e.push(4294967296 * f() | 0) } return new r.init(e, x) } }), f = (i = _.enc = {}).Hex = { stringify: function ($) { for (var x = $.words, _ = $.sigBytes, e = [], t = 0; t < _; t++) { var r = x[t >>> 2] >>> 24 - t % 4 * 8 & 255; e.push((r >>> 4).toString(16)), e.push((15 & r).toString(16)) } return e.join("") }, parse: function ($) { for (var x = $.length, _ = [], e = 0; e < x; e += 2)_[e >>> 3] |= parseInt($.substr(e, 2), 16) << 24 - e % 8 * 4; return new r.init(_, x / 2) } }, n = i.Latin1 = { stringify: function ($) { for (var x = $.words, _ = $.sigBytes, e = [], t = 0; t < _; t++) { var r = x[t >>> 2] >>> 24 - t % 4 * 8 & 255; e.push(String.fromCharCode(r)) } return e.join("") }, parse: function ($) { for (var x = $.length, _ = [], e = 0; e < x; e++)_[e >>> 2] |= (255 & $.charCodeAt(e)) << 24 - e % 4 * 8; return new r.init(_, x) } }, c = i.Utf8 = { stringify: function ($) { try { return decodeURIComponent(escape(n.stringify($))) } catch (x) { throw Error("Malformed UTF-8 data") } }, parse: function ($) { return n.parse(unescape(encodeURIComponent($))) } }, a = e.BufferedBlockAlgorithm = t.extend({ reset: function () { this._data = new r.init, this._nDataBytes = 0 }, _append: function ($) { "string" == typeof $ && ($ = c.parse($)), this._data.concat($), this._nDataBytes += $.sigBytes }, _process: function (x) { var _ = this._data, e = _.words, t = _.sigBytes, i = this.blockSize, f = t / (4 * i), n = (f = x ? $.ceil(f) : $.max((0 | f) - this._minBufferSize, 0)) * i, c = $.min(4 * n, t); if (n) { for (var a = 0; a < n; a += i)this._doProcessBlock(e, a); var o = e.splice(0, n); _.sigBytes -= c } return new r.init(o, c) }, clone: function () { var $ = t.clone.call(this); return $._data = this._data.clone(), $ }, _minBufferSize: 0 }), e.Hasher = a.extend({ cfg: t.extend(), init: function ($) { this.cfg = this.cfg.extend($), this.reset() }, reset: function () { a.reset.call(this), this._doReset() }, update: function ($) { return this._append($), this._process(), this }, finalize: function ($) { return $ && this._append($), this._doFinalize() }, blockSize: 16, _createHelper: function ($) { return function (x, _) { return new $.init(_).finalize(x) } }, _createHmacHelper: function ($) { return function (x, _) { return new o.HMAC.init($, _).finalize(x) } } }), o = _.algo = {}, _); return h = (s = xx).lib.WordArray, s.enc.Base64 = { stringify: function ($) { var x = $.words, _ = $.sigBytes, e = this._map; $.clamp(); for (var t = [], r = 0; r < _; r += 3)for (var i = x[r >>> 2] >>> 24 - r % 4 * 8 & 255, f = x[r + 1 >>> 2] >>> 24 - (r + 1) % 4 * 8 & 255, n = i << 16 | f << 8 | x[r + 2 >>> 2] >>> 24 - (r + 2) % 4 * 8 & 255, c = 0; c < 4 && r + .75 * c < _; c++)t.push(e.charAt(n >>> 6 * (3 - c) & 63)); var a = e.charAt(64); if (a) for (; t.length % 4;)t.push(a); return t.join("") }, parse: function ($) { var x = $.length, _ = this._map, e = this._reverseMap; if (!e) { e = this._reverseMap = []; for (var t = 0; t < _.length; t++)e[_.charCodeAt(t)] = t } var r = _.charAt(64); if (r) { var i = $.indexOf(r); -1 !== i && (x = i) } return function $(x, _, e) { for (var t = [], r = 0, i = 0; i < _; i++)if (i % 4) { var f = e[x.charCodeAt(i - 1)] << i % 4 * 2, n = e[x.charCodeAt(i)] >>> 6 - i % 4 * 2; t[r >>> 2] |= (f | n) << 24 - r % 4 * 8, r++ } return h.create(t, r) }($, x, e) }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" }, !function ($) { var x = xx, _ = x.lib, e = _.WordArray, t = _.Hasher, r = x.algo, i = []; !function () { for (var x = 0; x < 64; x++)i[x] = 4294967296 * $.abs($.sin(x + 1)) | 0 }(); var f = r.MD5 = t.extend({ _doReset: function () { this._hash = new e.init([1732584193, 4023233417, 2562383102, 271733878]) }, _doProcessBlock: function ($, x) { for (var _ = 0; _ < 16; _++) { var e = x + _, t = $[e]; $[e] = (t << 8 | t >>> 24) & 16711935 | (t << 24 | t >>> 8) & 4278255360 } var r = this._hash.words, f = $[x + 0], s = $[x + 1], h = $[x + 2], d = $[x + 3], l = $[x + 4], u = $[x + 5], v = $[x + 6], p = $[x + 7], b = $[x + 8], y = $[x + 9], g = $[x + 10], B = $[x + 11], w = $[x + 12], k = $[x + 13], S = $[x + 14], m = $[x + 15], H = r[0], z = r[1], C = r[2], A = r[3]; H = n(H, z, C, A, f, 7, i[0]), A = n(A, H, z, C, s, 12, i[1]), C = n(C, A, H, z, h, 17, i[2]), z = n(z, C, A, H, d, 22, i[3]), H = n(H, z, C, A, l, 7, i[4]), A = n(A, H, z, C, u, 12, i[5]), C = n(C, A, H, z, v, 17, i[6]), z = n(z, C, A, H, p, 22, i[7]), H = n(H, z, C, A, b, 7, i[8]), A = n(A, H, z, C, y, 12, i[9]), C = n(C, A, H, z, g, 17, i[10]), z = n(z, C, A, H, B, 22, i[11]), H = n(H, z, C, A, w, 7, i[12]), A = n(A, H, z, C, k, 12, i[13]), C = n(C, A, H, z, S, 17, i[14]), z = n(z, C, A, H, m, 22, i[15]), H = c(H, z, C, A, s, 5, i[16]), A = c(A, H, z, C, v, 9, i[17]), C = c(C, A, H, z, B, 14, i[18]), z = c(z, C, A, H, f, 20, i[19]), H = c(H, z, C, A, u, 5, i[20]), A = c(A, H, z, C, g, 9, i[21]), C = c(C, A, H, z, m, 14, i[22]), z = c(z, C, A, H, l, 20, i[23]), H = c(H, z, C, A, y, 5, i[24]), A = c(A, H, z, C, S, 9, i[25]), C = c(C, A, H, z, d, 14, i[26]), z = c(z, C, A, H, b, 20, i[27]), H = c(H, z, C, A, k, 5, i[28]), A = c(A, H, z, C, h, 9, i[29]), C = c(C, A, H, z, p, 14, i[30]), z = c(z, C, A, H, w, 20, i[31]), H = a(H, z, C, A, u, 4, i[32]), A = a(A, H, z, C, b, 11, i[33]), C = a(C, A, H, z, B, 16, i[34]), z = a(z, C, A, H, S, 23, i[35]), H = a(H, z, C, A, s, 4, i[36]), A = a(A, H, z, C, l, 11, i[37]), C = a(C, A, H, z, p, 16, i[38]), z = a(z, C, A, H, g, 23, i[39]), H = a(H, z, C, A, k, 4, i[40]), A = a(A, H, z, C, f, 11, i[41]), C = a(C, A, H, z, d, 16, i[42]), z = a(z, C, A, H, v, 23, i[43]), H = a(H, z, C, A, y, 4, i[44]), A = a(A, H, z, C, w, 11, i[45]), C = a(C, A, H, z, m, 16, i[46]), z = a(z, C, A, H, h, 23, i[47]), H = o(H, z, C, A, f, 6, i[48]), A = o(A, H, z, C, p, 10, i[49]), C = o(C, A, H, z, S, 15, i[50]), z = o(z, C, A, H, u, 21, i[51]), H = o(H, z, C, A, w, 6, i[52]), A = o(A, H, z, C, d, 10, i[53]), C = o(C, A, H, z, g, 15, i[54]), z = o(z, C, A, H, s, 21, i[55]), H = o(H, z, C, A, b, 6, i[56]), A = o(A, H, z, C, m, 10, i[57]), C = o(C, A, H, z, v, 15, i[58]), z = o(z, C, A, H, k, 21, i[59]), H = o(H, z, C, A, l, 6, i[60]), A = o(A, H, z, C, B, 10, i[61]), C = o(C, A, H, z, h, 15, i[62]), z = o(z, C, A, H, y, 21, i[63]), r[0] = r[0] + H | 0, r[1] = r[1] + z | 0, r[2] = r[2] + C | 0, r[3] = r[3] + A | 0 }, _doFinalize: function () { var x = this._data, _ = x.words, e = 8 * this._nDataBytes, t = 8 * x.sigBytes; _[t >>> 5] |= 128 << 24 - t % 32; var r = $.floor(e / 4294967296), i = e; _[(t + 64 >>> 9 << 4) + 15] = (r << 8 | r >>> 24) & 16711935 | (r << 24 | r >>> 8) & 4278255360, _[(t + 64 >>> 9 << 4) + 14] = (i << 8 | i >>> 24) & 16711935 | (i << 24 | i >>> 8) & 4278255360, x.sigBytes = (_.length + 1) * 4, this._process(); for (var f = this._hash, n = f.words, c = 0; c < 4; c++) { var a = n[c]; n[c] = (a << 8 | a >>> 24) & 16711935 | (a << 24 | a >>> 8) & 4278255360 } return f }, clone: function () { var $ = t.clone.call(this); return $._hash = this._hash.clone(), $ } }); function n($, x, _, e, t, r, i) { var f = $ + (x & _ | ~x & e) + t + i; return (f << r | f >>> 32 - r) + x } function c($, x, _, e, t, r, i) { var f = $ + (x & e | _ & ~e) + t + i; return (f << r | f >>> 32 - r) + x } function a($, x, _, e, t, r, i) { var f = $ + (x ^ _ ^ e) + t + i; return (f << r | f >>> 32 - r) + x } function o($, x, _, e, t, r, i) { var f = $ + (_ ^ (x | ~e)) + t + i; return (f << r | f >>> 32 - r) + x } x.MD5 = t._createHelper(f), x.HmacMD5 = t._createHmacHelper(f) }(Math), u = (l = (d = xx).lib).WordArray, v = l.Hasher, p = d.algo, b = [], y = p.SHA1 = v.extend({ _doReset: function () { this._hash = new u.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520]) }, _doProcessBlock: function ($, x) { for (var _ = this._hash.words, e = _[0], t = _[1], r = _[2], i = _[3], f = _[4], n = 0; n < 80; n++) { if (n < 16) b[n] = 0 | $[x + n]; else { var c = b[n - 3] ^ b[n - 8] ^ b[n - 14] ^ b[n - 16]; b[n] = c << 1 | c >>> 31 } var a = (e << 5 | e >>> 27) + f + b[n]; n < 20 ? a += (t & r | ~t & i) + 1518500249 : n < 40 ? a += (t ^ r ^ i) + 1859775393 : n < 60 ? a += (t & r | t & i | r & i) - 1894007588 : a += (t ^ r ^ i) - 899497514, f = i, i = r, r = t << 30 | t >>> 2, t = e, e = a } _[0] = _[0] + e | 0, _[1] = _[1] + t | 0, _[2] = _[2] + r | 0, _[3] = _[3] + i | 0, _[4] = _[4] + f | 0 }, _doFinalize: function () { var $ = this._data, x = $.words, _ = 8 * this._nDataBytes, e = 8 * $.sigBytes; return x[e >>> 5] |= 128 << 24 - e % 32, x[(e + 64 >>> 9 << 4) + 14] = Math.floor(_ / 4294967296), x[(e + 64 >>> 9 << 4) + 15] = _, $.sigBytes = 4 * x.length, this._process(), this._hash }, clone: function () { var $ = v.clone.call(this); return $._hash = this._hash.clone(), $ } }), d.SHA1 = v._createHelper(y), d.HmacSHA1 = v._createHmacHelper(y), g = Math, k = (w = (B = xx).lib).WordArray, S = w.Hasher, m = B.algo, H = [], z = [], !function () { function $($) { for (var x = g.sqrt($), _ = 2; _ <= x; _++)if (!($ % _)) return !1; return !0 } function x($) { return ($ - (0 | $)) * 4294967296 | 0 } for (var _ = 2, e = 0; e < 64;)$(_) && (e < 8 && (H[e] = x(g.pow(_, .5))), z[e] = x(g.pow(_, 1 / 3)), e++), _++ }(), C = [], A = m.SHA256 = S.extend({ _doReset: function () { this._hash = new k.init(H.slice(0)) }, _doProcessBlock: function ($, x) { for (var _ = this._hash.words, e = _[0], t = _[1], r = _[2], i = _[3], f = _[4], n = _[5], c = _[6], a = _[7], o = 0; o < 64; o++) { if (o < 16) C[o] = 0 | $[x + o]; else { var s = C[o - 15], h = (s << 25 | s >>> 7) ^ (s << 14 | s >>> 18) ^ s >>> 3, d = C[o - 2], l = (d << 15 | d >>> 17) ^ (d << 13 | d >>> 19) ^ d >>> 10; C[o] = h + C[o - 7] + l + C[o - 16] } var u = f & n ^ ~f & c, v = e & t ^ e & r ^ t & r, p = (e << 30 | e >>> 2) ^ (e << 19 | e >>> 13) ^ (e << 10 | e >>> 22), b = a + ((f << 26 | f >>> 6) ^ (f << 21 | f >>> 11) ^ (f << 7 | f >>> 25)) + u + z[o] + C[o], y = p + v; a = c, c = n, n = f, f = i + b | 0, i = r, r = t, t = e, e = b + y | 0 } _[0] = _[0] + e | 0, _[1] = _[1] + t | 0, _[2] = _[2] + r | 0, _[3] = _[3] + i | 0, _[4] = _[4] + f | 0, _[5] = _[5] + n | 0, _[6] = _[6] + c | 0, _[7] = _[7] + a | 0 }, _doFinalize: function () { var $ = this._data, x = $.words, _ = 8 * this._nDataBytes, e = 8 * $.sigBytes; return x[e >>> 5] |= 128 << 24 - e % 32, x[(e + 64 >>> 9 << 4) + 14] = g.floor(_ / 4294967296), x[(e + 64 >>> 9 << 4) + 15] = _, $.sigBytes = 4 * x.length, this._process(), this._hash }, clone: function () { var $ = S.clone.call(this); return $._hash = this._hash.clone(), $ } }), B.SHA256 = S._createHelper(A), B.HmacSHA256 = S._createHmacHelper(A), !function () { var $ = xx, x = $.lib.WordArray, _ = $.enc; function e($) { return $ << 8 & 4278255360 | $ >>> 8 & 16711935 } _.Utf16 = _.Utf16BE = { stringify: function ($) { for (var x = $.words, _ = $.sigBytes, e = [], t = 0; t < _; t += 2) { var r = x[t >>> 2] >>> 16 - t % 4 * 8 & 65535; e.push(String.fromCharCode(r)) } return e.join("") }, parse: function ($) { for (var _ = $.length, e = [], t = 0; t < _; t++)e[t >>> 1] |= $.charCodeAt(t) << 16 - t % 2 * 16; return x.create(e, 2 * _) } }, _.Utf16LE = { stringify: function ($) { for (var x = $.words, _ = $.sigBytes, t = [], r = 0; r < _; r += 2) { var i = e(x[r >>> 2] >>> 16 - r % 4 * 8 & 65535); t.push(String.fromCharCode(i)) } return t.join("") }, parse: function ($) { for (var _ = $.length, t = [], r = 0; r < _; r++)t[r >>> 1] |= e($.charCodeAt(r) << 16 - r % 2 * 16); return x.create(t, 2 * _) } } }(), !function () { if ("function" == typeof ArrayBuffer) { var $ = xx.lib.WordArray, x = $.init; ($.init = function ($) { if ($ instanceof ArrayBuffer && ($ = new Uint8Array($)), ($ instanceof Int8Array || "undefined" != typeof Uint8ClampedArray && $ instanceof Uint8ClampedArray || $ instanceof Int16Array || $ instanceof Uint16Array || $ instanceof Int32Array || $ instanceof Uint32Array || $ instanceof Float32Array || $ instanceof Float64Array) && ($ = new Uint8Array($.buffer, $.byteOffset, $.byteLength)), $ instanceof Uint8Array) { for (var _ = $.byteLength, e = [], t = 0; t < _; t++)e[t >>> 2] |= $[t] << 24 - t % 4 * 8; x.call(this, e, _) } else x.apply(this, arguments) }).prototype = $ } }(), !function ($) { var x = xx, _ = x.lib, e = _.WordArray, t = _.Hasher, r = x.algo, i = e.create([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]), f = e.create([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]), n = e.create([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]), c = e.create([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]), a = e.create([0, 1518500249, 1859775393, 2400959708, 2840853838]), o = e.create([1352829926, 1548603684, 1836072691, 2053994217, 0]), s = r.RIPEMD160 = t.extend({ _doReset: function () { this._hash = e.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]) }, _doProcessBlock: function ($, x) { for (var _, e, t, r, s, h, d, l, u, v, b, y, g, B, w, k, S, m, H, z, C, A, D, E, F, R, M, P, W, O, K, X, L, j, I, U, N, T, Z, q, G, J = 0; J < 16; J++) { var Q = x + J, V = $[Q]; $[Q] = (V << 8 | V >>> 24) & 16711935 | (V << 24 | V >>> 8) & 4278255360 } var Y = this._hash.words, $$ = a.words, $x = o.words, $_ = i.words, $e = f.words, $t = n.words, $r = c.words; U = K = Y[0], N = X = Y[1], T = L = Y[2], Z = j = Y[3], q = I = Y[4]; for (var J = 0; J < 80; J += 1) { G = K + $[x + $_[J]] | 0, J < 16 ? G += (_ = X, e = L, t = j, (_ ^ e ^ t) + $$[0]) : J < 32 ? G += (r = X, s = L, h = j, (r & s | ~r & h) + $$[1]) : J < 48 ? G += (d = X, l = L, u = j, ((d | ~l) ^ u) + $$[2]) : J < 64 ? G += (v = X, b = L, y = j, (v & y | b & ~y) + $$[3]) : G += (g = X, B = L, w = j, (g ^ (B | ~w)) + $$[4]), G |= 0, G = (G = p(G, $t[J])) + I | 0, K = I, I = j, j = p(L, 10), L = X, X = G, G = U + $[x + $e[J]] | 0, J < 16 ? G += (k = N, S = T, m = Z, (k ^ (S | ~m)) + $x[0]) : J < 32 ? G += (H = N, z = T, C = Z, (H & C | z & ~C) + $x[1]) : J < 48 ? G += (A = N, D = T, E = Z, ((A | ~D) ^ E) + $x[2]) : J < 64 ? G += (F = N, R = T, M = Z, (F & R | ~F & M) + $x[3]) : G += (P = N, W = T, O = Z, (P ^ W ^ O) + $x[4]), G |= 0, G = (G = p(G, $r[J])) + q | 0, U = q, q = Z, Z = p(T, 10), T = N, N = G } G = Y[1] + L + Z | 0, Y[1] = Y[2] + j + q | 0, Y[2] = Y[3] + I + U | 0, Y[3] = Y[4] + K + N | 0, Y[4] = Y[0] + X + T | 0, Y[0] = G }, _doFinalize: function () { var $ = this._data, x = $.words, _ = 8 * this._nDataBytes, e = 8 * $.sigBytes; x[e >>> 5] |= 128 << 24 - e % 32, x[(e + 64 >>> 9 << 4) + 14] = (_ << 8 | _ >>> 24) & 16711935 | (_ << 24 | _ >>> 8) & 4278255360, $.sigBytes = (x.length + 1) * 4, this._process(); for (var t = this._hash, r = t.words, i = 0; i < 5; i++) { var f = r[i]; r[i] = (f << 8 | f >>> 24) & 16711935 | (f << 24 | f >>> 8) & 4278255360 } return t }, clone: function () { var $ = t.clone.call(this); return $._hash = this._hash.clone(), $ } }); function h($, x, _) { return $ ^ x ^ _ } function d($, x, _) { return $ & x | ~$ & _ } function l($, x, _) { return ($ | ~x) ^ _ } function u($, x, _) { return $ & _ | x & ~_ } function v($, x, _) { return $ ^ (x | ~_) } function p($, x) { return $ << x | $ >>> 32 - x } x.RIPEMD160 = t._createHelper(s), x.HmacRIPEMD160 = t._createHmacHelper(s) }(Math), E = (D = xx).lib.Base, F = D.enc.Utf8, D.algo.HMAC = E.extend({ init: function ($, x) { $ = this._hasher = new $.init, "string" == typeof x && (x = F.parse(x)); var _ = $.blockSize, e = 4 * _; x.sigBytes > e && (x = $.finalize(x)), x.clamp(); for (var t = this._oKey = x.clone(), r = this._iKey = x.clone(), i = t.words, f = r.words, n = 0; n < _; n++)i[n] ^= 1549556828, f[n] ^= 909522486; t.sigBytes = r.sigBytes = e, this.reset() }, reset: function () { var $ = this._hasher; $.reset(), $.update(this._iKey) }, update: function ($) { return this._hasher.update($), this }, finalize: function ($) { var x = this._hasher, _ = x.finalize($); return x.reset(), x.finalize(this._oKey.clone().concat(_)) } }), P = (M = (R = xx).lib).Base, W = M.WordArray, K = (O = R.algo).SHA1, X = O.HMAC, L = O.PBKDF2 = P.extend({ cfg: P.extend({ keySize: 4, hasher: K, iterations: 1 }), init: function ($) { this.cfg = this.cfg.extend($) }, compute: function ($, x) { for (var _ = this.cfg, e = X.create(_.hasher, $), t = W.create(), r = W.create([1]), i = t.words, f = r.words, n = _.keySize, c = _.iterations; i.length < n;) { var a = e.update(x).finalize(r); e.reset(); for (var o = a.words, s = o.length, h = a, d = 1; d < c; d++) { h = e.finalize(h), e.reset(); for (var l = h.words, u = 0; u < s; u++)o[u] ^= l[u] } t.concat(a), f[0]++ } return t.sigBytes = 4 * n, t } }), R.PBKDF2 = function ($, x, _) { return L.create(_).compute($, x) }, U = (I = (j = xx).lib).Base, N = I.WordArray, Z = (T = j.algo).MD5, q = T.EvpKDF = U.extend({ cfg: U.extend({ keySize: 4, hasher: Z, iterations: 1 }), init: function ($) { this.cfg = this.cfg.extend($) }, compute: function ($, x) { for (var _ = this.cfg, e = _.hasher.create(), t = N.create(), r = t.words, i = _.keySize, f = _.iterations; r.length < i;) { n && e.update(n); var n = e.update($).finalize(x); e.reset(); for (var c = 1; c < f; c++)n = e.finalize(n), e.reset(); t.concat(n) } return t.sigBytes = 4 * i, t } }), j.EvpKDF = function ($, x, _) { return q.create(_).compute($, x) }, J = (G = xx).lib.WordArray, V = (Q = G.algo).SHA256, Y = Q.SHA224 = V.extend({ _doReset: function () { this._hash = new J.init([3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428]) }, _doFinalize: function () { var $ = V._doFinalize.call(this); return $.sigBytes -= 4, $ } }), G.SHA224 = V._createHelper(Y), G.HmacSHA224 = V._createHmacHelper(Y), $_ = ($x = ($$ = xx).lib).Base, $e = $x.WordArray, ($t = $$.x64 = {}).Word = $_.extend({ init: function ($, x) { this.high = $, this.low = x } }), $t.WordArray = $_.extend({ init: function ($, x) { $ = this.words = $ || [], void 0 != x ? this.sigBytes = x : this.sigBytes = 8 * $.length }, toX32: function () { for (var $ = this.words, x = $.length, _ = [], e = 0; e < x; e++) { var t = $[e]; _.push(t.high), _.push(t.low) } return $e.create(_, this.sigBytes) }, clone: function () { for (var $ = $_.clone.call(this), x = $.words = this.words.slice(0), _ = x.length, e = 0; e < _; e++)x[e] = x[e].clone(); return $ } }), $r = Math, $n = ($f = ($i = xx).lib).WordArray, $c = $f.Hasher, $6 = $i.x64.Word, $a = $i.algo, $o = [], $0 = [], $2 = [], !function () { for (var $ = 1, x = 0, _ = 0; _ < 24; _++) { $o[$ + 5 * x] = (_ + 1) * (_ + 2) / 2 % 64; var e = x % 5, t = (2 * $ + 3 * x) % 5; $ = e, x = t } for (var $ = 0; $ < 5; $++)for (var x = 0; x < 5; x++)$0[$ + 5 * x] = x + (2 * $ + 3 * x) % 5 * 5; for (var r = 1, i = 0; i < 24; i++) { for (var f = 0, n = 0, c = 0; c < 7; c++) { if (1 & r) { var a = (1 << c) - 1; a < 32 ? n ^= 1 << a : f ^= 1 << a - 32 } 128 & r ? r = r << 1 ^ 113 : r <<= 1 } $2[i] = $6.create(f, n) } }(), $s = [], !function () { for (var $ = 0; $ < 25; $++)$s[$] = $6.create() }(), $h = $a.SHA3 = $c.extend({ cfg: $c.cfg.extend({ outputLength: 512 }), _doReset: function () { for (var $ = this._state = [], x = 0; x < 25; x++)$[x] = new $6.init; this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32 }, _doProcessBlock: function ($, x) { for (var _ = this._state, e = this.blockSize / 2, t = 0; t < e; t++) { var r = $[x + 2 * t], i = $[x + 2 * t + 1]; r = (r << 8 | r >>> 24) & 16711935 | (r << 24 | r >>> 8) & 4278255360, i = (i << 8 | i >>> 24) & 16711935 | (i << 24 | i >>> 8) & 4278255360; var f = _[t]; f.high ^= i, f.low ^= r } for (var n = 0; n < 24; n++) { for (var c = 0; c < 5; c++) { for (var a = 0, o = 0, s = 0; s < 5; s++) { var f = _[c + 5 * s]; a ^= f.high, o ^= f.low } var h = $s[c]; h.high = a, h.low = o } for (var c = 0; c < 5; c++)for (var d = $s[(c + 4) % 5], l = $s[(c + 1) % 5], u = l.high, v = l.low, a = d.high ^ (u << 1 | v >>> 31), o = d.low ^ (v << 1 | u >>> 31), s = 0; s < 5; s++) { var f = _[c + 5 * s]; f.high ^= a, f.low ^= o } for (var p = 1; p < 25; p++) { var f = _[p], b = f.high, y = f.low, g = $o[p]; if (g < 32) var a = b << g | y >>> 32 - g, o = y << g | b >>> 32 - g; else var a = y << g - 32 | b >>> 64 - g, o = b << g - 32 | y >>> 64 - g; var B = $s[$0[p]]; B.high = a, B.low = o } var w = $s[0], k = _[0]; w.high = k.high, w.low = k.low; for (var c = 0; c < 5; c++)for (var s = 0; s < 5; s++) { var p = c + 5 * s, f = _[p], S = $s[p], m = $s[(c + 1) % 5 + 5 * s], H = $s[(c + 2) % 5 + 5 * s]; f.high = S.high ^ ~m.high & H.high, f.low = S.low ^ ~m.low & H.low } var f = _[0], z = $2[n]; f.high ^= z.high, f.low ^= z.low } }, _doFinalize: function () { var $ = this._data, x = $.words; this._nDataBytes; var _ = 8 * $.sigBytes, e = 32 * this.blockSize; x[_ >>> 5] |= 1 << 24 - _ % 32, x[($r.ceil((_ + 1) / e) * e >>> 5) - 1] |= 128, $.sigBytes = 4 * x.length, this._process(); for (var t = this._state, r = this.cfg.outputLength / 8, i = r / 8, f = [], n = 0; n < i; n++) { var c = t[n], a = c.high, o = c.low; a = (a << 8 | a >>> 24) & 16711935 | (a << 24 | a >>> 8) & 4278255360, o = (o << 8 | o >>> 24) & 16711935 | (o << 24 | o >>> 8) & 4278255360, f.push(o), f.push(a) } return new $n.init(f, r) }, clone: function () { for (var $ = $c.clone.call(this), x = $._state = this._state.slice(0), _ = 0; _ < 25; _++)x[_] = x[_].clone(); return $ } }), $i.SHA3 = $c._createHelper($h), $i.HmacSHA3 = $c._createHmacHelper($h), !function () { var $ = xx, x = $.lib.Hasher, _ = $.x64, e = _.Word, t = _.WordArray, r = $.algo; function i() { return e.create.apply(e, arguments) } var f = [i(1116352408, 3609767458), i(1899447441, 602891725), i(3049323471, 3964484399), i(3921009573, 2173295548), i(961987163, 4081628472), i(1508970993, 3053834265), i(2453635748, 2937671579), i(2870763221, 3664609560), i(3624381080, 2734883394), i(310598401, 1164996542), i(607225278, 1323610764), i(1426881987, 3590304994), i(1925078388, 4068182383), i(2162078206, 991336113), i(2614888103, 633803317), i(3248222580, 3479774868), i(3835390401, 2666613458), i(4022224774, 944711139), i(264347078, 2341262773), i(604807628, 2007800933), i(770255983, 1495990901), i(1249150122, 1856431235), i(1555081692, 3175218132), i(1996064986, 2198950837), i(2554220882, 3999719339), i(2821834349, 766784016), i(2952996808, 2566594879), i(3210313671, 3203337956), i(3336571891, 1034457026), i(3584528711, 2466948901), i(113926993, 3758326383), i(338241895, 168717936), i(666307205, 1188179964), i(773529912, 1546045734), i(1294757372, 1522805485), i(1396182291, 2643833823), i(1695183700, 2343527390), i(1986661051, 1014477480), i(2177026350, 1206759142), i(2456956037, 344077627), i(2730485921, 1290863460), i(2820302411, 3158454273), i(3259730800, 3505952657), i(3345764771, 106217008), i(3516065817, 3606008344), i(3600352804, 1432725776), i(4094571909, 1467031594), i(275423344, 851169720), i(430227734, 3100823752), i(506948616, 1363258195), i(659060556, 3750685593), i(883997877, 3785050280), i(958139571, 3318307427), i(1322822218, 3812723403), i(1537002063, 2003034995), i(1747873779, 3602036899), i(1955562222, 1575990012), i(2024104815, 1125592928), i(2227730452, 2716904306), i(2361852424, 442776044), i(2428436474, 593698344), i(2756734187, 3733110249), i(3204031479, 2999351573), i(3329325298, 3815920427), i(3391569614, 3928383900), i(3515267271, 566280711), i(3940187606, 3454069534), i(4118630271, 4000239992), i(116418474, 1914138554), i(174292421, 2731055270), i(289380356, 3203993006), i(460393269, 320620315), i(685471733, 587496836), i(852142971, 1086792851), i(1017036298, 365543100), i(1126000580, 2618297676), i(1288033470, 3409855158), i(1501505948, 4234509866), i(1607167915, 987167468), i(1816402316, 1246189591)], n = []; !function () { for (var $ = 0; $ < 80; $++)n[$] = i() }(); var c = r.SHA512 = x.extend({ _doReset: function () { this._hash = new t.init([new e.init(1779033703, 4089235720), new e.init(3144134277, 2227873595), new e.init(1013904242, 4271175723), new e.init(2773480762, 1595750129), new e.init(1359893119, 2917565137), new e.init(2600822924, 725511199), new e.init(528734635, 4215389547), new e.init(1541459225, 327033209)]) }, _doProcessBlock: function ($, x) { for (var _ = this._hash.words, e = _[0], t = _[1], r = _[2], i = _[3], c = _[4], a = _[5], o = _[6], s = _[7], h = e.high, d = e.low, l = t.high, u = t.low, v = r.high, p = r.low, b = i.high, y = i.low, g = c.high, B = c.low, w = a.high, k = a.low, S = o.high, m = o.low, H = s.high, z = s.low, C = h, A = d, D = l, E = u, F = v, R = p, M = b, P = y, W = g, O = B, K = w, X = k, L = S, j = m, I = H, U = z, N = 0; N < 80; N++) { var T = n[N]; if (N < 16) var Z = T.high = 0 | $[x + 2 * N], q = T.low = 0 | $[x + 2 * N + 1]; else { var G = n[N - 15], J = G.high, Q = G.low, V = (J >>> 1 | Q << 31) ^ (J >>> 8 | Q << 24) ^ J >>> 7, Y = (Q >>> 1 | J << 31) ^ (Q >>> 8 | J << 24) ^ (Q >>> 7 | J << 25), $$ = n[N - 2], $x = $$.high, $_ = $$.low, $e = ($x >>> 19 | $_ << 13) ^ ($x << 3 | $_ >>> 29) ^ $x >>> 6, $t = ($_ >>> 19 | $x << 13) ^ ($_ << 3 | $x >>> 29) ^ ($_ >>> 6 | $x << 26), $r = n[N - 7], $i = $r.high, $f = $r.low, $n = n[N - 16], $c = $n.high, $6 = $n.low, q = Y + $f, Z = V + $i + (q >>> 0 < Y >>> 0 ? 1 : 0), q = q + $t, Z = Z + $e + (q >>> 0 < $t >>> 0 ? 1 : 0), q = q + $6, Z = Z + $c + (q >>> 0 < $6 >>> 0 ? 1 : 0); T.high = Z, T.low = q } var $a = W & K ^ ~W & L, $o = O & X ^ ~O & j, $0 = C & D ^ C & F ^ D & F, $2 = A & E ^ A & R ^ E & R, $s = (C >>> 28 | A << 4) ^ (C << 30 | A >>> 2) ^ (C << 25 | A >>> 7), $h = (A >>> 28 | C << 4) ^ (A << 30 | C >>> 2) ^ (A << 25 | C >>> 7), $d = (W >>> 14 | O << 18) ^ (W >>> 18 | O << 14) ^ (W << 23 | O >>> 9), $l = (O >>> 14 | W << 18) ^ (O >>> 18 | W << 14) ^ (O << 23 | W >>> 9), $4 = f[N], $1 = $4.high, $3 = $4.low, $u = U + $l, $v = I + $d + ($u >>> 0 < U >>> 0 ? 1 : 0), $u = $u + $o, $v = $v + $a + ($u >>> 0 < $o >>> 0 ? 1 : 0), $u = $u + $3, $v = $v + $1 + ($u >>> 0 < $3 >>> 0 ? 1 : 0), $u = $u + q, $v = $v + Z + ($u >>> 0 < q >>> 0 ? 1 : 0), $8 = $h + $2, $p = $s + $0 + ($8 >>> 0 < $h >>> 0 ? 1 : 0); I = L, U = j, L = K, j = X, K = W, X = O, W = M + $v + ((O = P + $u | 0) >>> 0 < P >>> 0 ? 1 : 0) | 0, M = F, P = R, F = D, R = E, D = C, E = A, C = $v + $p + ((A = $u + $8 | 0) >>> 0 < $u >>> 0 ? 1 : 0) | 0 } d = e.low = d + A, e.high = h + C + (d >>> 0 < A >>> 0 ? 1 : 0), u = t.low = u + E, t.high = l + D + (u >>> 0 < E >>> 0 ? 1 : 0), p = r.low = p + R, r.high = v + F + (p >>> 0 < R >>> 0 ? 1 : 0), y = i.low = y + P, i.high = b + M + (y >>> 0 < P >>> 0 ? 1 : 0), B = c.low = B + O, c.high = g + W + (B >>> 0 < O >>> 0 ? 1 : 0), k = a.low = k + X, a.high = w + K + (k >>> 0 < X >>> 0 ? 1 : 0), m = o.low = m + j, o.high = S + L + (m >>> 0 < j >>> 0 ? 1 : 0), z = s.low = z + U, s.high = H + I + (z >>> 0 < U >>> 0 ? 1 : 0) }, _doFinalize: function () { var $ = this._data, x = $.words, _ = 8 * this._nDataBytes, e = 8 * $.sigBytes; return x[e >>> 5] |= 128 << 24 - e % 32, x[(e + 128 >>> 10 << 5) + 30] = Math.floor(_ / 4294967296), x[(e + 128 >>> 10 << 5) + 31] = _, $.sigBytes = 4 * x.length, this._process(), this._hash.toX32() }, clone: function () { var $ = x.clone.call(this); return $._hash = this._hash.clone(), $ }, blockSize: 32 }); $.SHA512 = x._createHelper(c), $.HmacSHA512 = x._createHmacHelper(c) }(), $4 = ($l = ($d = xx).x64).Word, $1 = $l.WordArray, $u = ($3 = $d.algo).SHA512, $v = $3.SHA384 = $u.extend({ _doReset: function () { this._hash = new $1.init([new $4.init(3418070365, 3238371032), new $4.init(1654270250, 914150663), new $4.init(2438529370, 812702999), new $4.init(355462360, 4144912697), new $4.init(1731405415, 4290775857), new $4.init(2394180231, 1750603025), new $4.init(3675008525, 1694076839), new $4.init(1203062813, 3204075428)]) }, _doFinalize: function () { var $ = $u._doFinalize.call(this); return $.sigBytes -= 16, $ } }), $d.SHA384 = $u._createHelper($v), $d.HmacSHA384 = $u._createHmacHelper($v), xx.lib.Cipher || ($5 = ($p = ($8 = xx).lib).Base, $b = $p.WordArray, $y = $p.BufferedBlockAlgorithm, ($g = $8.enc).Utf8, $7 = $g.Base64, $B = $8.algo.EvpKDF, $w = $p.Cipher = $y.extend({ cfg: $5.extend(), createEncryptor: function ($, x) { return this.create(this._ENC_XFORM_MODE, $, x) }, createDecryptor: function ($, x) { return this.create(this._DEC_XFORM_MODE, $, x) }, init: function ($, x, _) { this.cfg = this.cfg.extend(_), this._xformMode = $, this._key = x, this.reset() }, reset: function () { $y.reset.call(this), this._doReset() }, process: function ($) { return this._append($), this._process() }, finalize: function ($) { return $ && this._append($), this._doFinalize() }, keySize: 4, ivSize: 4, _ENC_XFORM_MODE: 1, _DEC_XFORM_MODE: 2, _createHelper: function () { function $($) { return "string" == typeof $ ? $E : $A } return function (x) { return { encrypt: function (_, e, t) { return $(e).encrypt(x, _, e, t) }, decrypt: function (_, e, t) { return $(e).decrypt(x, _, e, t) } } } }() }), $p.StreamCipher = $w.extend({ _doFinalize: function () { return this._process(!0) }, blockSize: 1 }), $k = $8.mode = {}, $S = $p.BlockCipherMode = $5.extend({ createEncryptor: function ($, x) { return this.Encryptor.create($, x) }, createDecryptor: function ($, x) { return this.Decryptor.create($, x) }, init: function ($, x) { this._cipher = $, this._iv = x } }), $m = $k.CBC = function () { var $ = $S.extend(); function x($, x, _) { var e = this._iv; if (e) { var t = e; this._iv = void 0 } else var t = this._prevBlock; for (var r = 0; r < _; r++)$[x + r] ^= t[r] } return $.Encryptor = $.extend({ processBlock: function ($, _) { var e = this._cipher, t = e.blockSize; x.call(this, $, _, t), e.encryptBlock($, _), this._prevBlock = $.slice(_, _ + t) } }), $.Decryptor = $.extend({ processBlock: function ($, _) { var e = this._cipher, t = e.blockSize, r = $.slice(_, _ + t); e.decryptBlock($, _), x.call(this, $, _, t), this._prevBlock = r } }), $ }(), $H = ($8.pad = {}).Pkcs7 = { pad: function ($, x) { for (var _ = 4 * x, e = _ - $.sigBytes % _, t = e << 24 | e << 16 | e << 8 | e, r = [], i = 0; i < e; i += 4)r.push(t); var f = $b.create(r, e); $.concat(f) }, unpad: function ($) { var x = 255 & $.words[$.sigBytes - 1 >>> 2]; $.sigBytes -= x } }, $p.BlockCipher = $w.extend({ cfg: $w.cfg.extend({ mode: $m, padding: $H }), reset: function () { $w.reset.call(this); var $ = this.cfg, x = $.iv, _ = $.mode; if (this._xformMode == this._ENC_XFORM_MODE) var e = _.createEncryptor; else { var e = _.createDecryptor; this._minBufferSize = 1 } this._mode && this._mode.__creator == e ? this._mode.init(this, x && x.words) : (this._mode = e.call(_, this, x && x.words), this._mode.__creator = e) }, _doProcessBlock: function ($, x) { this._mode.processBlock($, x) }, _doFinalize: function () { var $ = this.cfg.padding; if (this._xformMode == this._ENC_XFORM_MODE) { $.pad(this._data, this.blockSize); var x = this._process(!0) } else { var x = this._process(!0); $.unpad(x) } return x }, blockSize: 4 }), $z = $p.CipherParams = $5.extend({ init: function ($) { this.mixIn($) }, toString: function ($) { return ($ || this.formatter).stringify(this) } }), $C = ($8.format = {}).OpenSSL = { stringify: function ($) { var x = $.ciphertext, _ = $.salt; if (_) var e = $b.create([1398893684, 1701076831]).concat(_).concat(x); else var e = x; return e.toString($7) }, parse: function ($) { var x = $7.parse($), _ = x.words; if (1398893684 == _[0] && 1701076831 == _[1]) { var e = $b.create(_.slice(2, 4)); _.splice(0, 4), x.sigBytes -= 16 } return $z.create({ ciphertext: x, salt: e }) } }, $A = $p.SerializableCipher = $5.extend({ cfg: $5.extend({ format: $C }), encrypt: function ($, x, _, e) { e = this.cfg.extend(e); var t = $.createEncryptor(_, e), r = t.finalize(x), i = t.cfg; return $z.create({ ciphertext: r, key: _, iv: i.iv, algorithm: $, mode: i.mode, padding: i.padding, blockSize: $.blockSize, formatter: e.format }) }, decrypt: function ($, x, _, e) { return e = this.cfg.extend(e), x = this._parse(x, e.format), $.createDecryptor(_, e).finalize(x.ciphertext) }, _parse: function ($, x) { return "string" == typeof $ ? x.parse($, this) : $ } }), $D = ($8.kdf = {}).OpenSSL = { execute: function ($, x, _, e) { e || (e = $b.random(8)); var t = $B.create({ keySize: x + _ }).compute($, e), r = $b.create(t.words.slice(x), 4 * _); return t.sigBytes = 4 * x, $z.create({ key: t, iv: r, salt: e }) } }, $E = $p.PasswordBasedCipher = $A.extend({ cfg: $A.cfg.extend({ kdf: $D }), encrypt: function ($, x, _, e) { var t = (e = this.cfg.extend(e)).kdf.execute(_, $.keySize, $.ivSize); e.iv = t.iv; var r = $A.encrypt.call(this, $, x, t.key, e); return r.mixIn(t), r }, decrypt: function ($, x, _, e) { e = this.cfg.extend(e), x = this._parse(x, e.format); var t = e.kdf.execute(_, $.keySize, $.ivSize, x.salt); return e.iv = t.iv, $A.decrypt.call(this, $, x, t.key, e) } })), xx.mode.CFB = function () { var $ = xx.lib.BlockCipherMode.extend(); function x($, x, _, e) { var t = this._iv; if (t) { var r = t.slice(0); this._iv = void 0 } else var r = this._prevBlock; e.encryptBlock(r, 0); for (var i = 0; i < _; i++)$[x + i] ^= r[i] } return $.Encryptor = $.extend({ processBlock: function ($, _) { var e = this._cipher, t = e.blockSize; x.call(this, $, _, t, e), this._prevBlock = $.slice(_, _ + t) } }), $.Decryptor = $.extend({ processBlock: function ($, _) { var e = this._cipher, t = e.blockSize, r = $.slice(_, _ + t); x.call(this, $, _, t, e), this._prevBlock = r } }), $ }(), xx.mode.ECB = (($F = xx.lib.BlockCipherMode.extend()).Encryptor = $F.extend({ processBlock: function ($, x) { this._cipher.encryptBlock($, x) } }), $F.Decryptor = $F.extend({ processBlock: function ($, x) { this._cipher.decryptBlock($, x) } }), $F), xx.pad.AnsiX923 = { pad: function ($, x) { var _ = $.sigBytes, e = 4 * x, t = e - _ % e, r = _ + t - 1; $.clamp(), $.words[r >>> 2] |= t << 24 - r % 4 * 8, $.sigBytes += t }, unpad: function ($) { var x = 255 & $.words[$.sigBytes - 1 >>> 2]; $.sigBytes -= x } }, xx.pad.Iso10126 = { pad: function ($, x) { var _ = 4 * x, e = _ - $.sigBytes % _; $.concat(xx.lib.WordArray.random(e - 1)).concat(xx.lib.WordArray.create([e << 24], 1)) }, unpad: function ($) { var x = 255 & $.words[$.sigBytes - 1 >>> 2]; $.sigBytes -= x } }, xx.pad.Iso97971 = { pad: function ($, x) { $.concat(xx.lib.WordArray.create([2147483648], 1)), xx.pad.ZeroPadding.pad($, x) }, unpad: function ($) { xx.pad.ZeroPadding.unpad($), $.sigBytes-- } }, xx.mode.OFB = ($M = ($R = xx.lib.BlockCipherMode.extend()).Encryptor = $R.extend({ processBlock: function ($, x) { var _ = this._cipher, e = _.blockSize, t = this._iv, r = this._keystream; t && (r = this._keystream = t.slice(0), this._iv = void 0), _.encryptBlock(r, 0); for (var i = 0; i < e; i++)$[x + i] ^= r[i] } }), $R.Decryptor = $M, $R), xx.pad.NoPadding = { pad: function () { }, unpad: function () { } }, $W = ($P = xx).lib.CipherParams, $O = $P.enc.Hex, $P.format.Hex = { stringify: function ($) { return $.ciphertext.toString($O) }, parse: function ($) { var x = $O.parse($); return $W.create({ ciphertext: x }) } }, $X = ($K = xx).lib.BlockCipher, $L = $K.algo, $j = [], $I = [], $U = [], $N = [], $T = [], $Z = [], $q = [], $G = [], $J = [], $9 = [], function () { for (var $ = [], x = 0; x < 256; x++)x < 128 ? $[x] = x << 1 : $[x] = x << 1 ^ 283; for (var _ = 0, e = 0, x = 0; x < 256; x++) { var t = e ^ e << 1 ^ e << 2 ^ e << 3 ^ e << 4; t = t >>> 8 ^ 255 & t ^ 99, $j[_] = t, $I[t] = _; var r = $[_], i = $[r], f = $[i], n = 257 * $[t] ^ 16843008 * t; $U[_] = n << 24 | n >>> 8, $N[_] = n << 16 | n >>> 16, $T[_] = n << 8 | n >>> 24, $Z[_] = n; var n = 16843009 * f ^ 65537 * i ^ 257 * r ^ 16843008 * _; $q[t] = n << 24 | n >>> 8, $G[t] = n << 16 | n >>> 16, $J[t] = n << 8 | n >>> 24, $9[t] = n, _ ? (_ = r ^ $[$[$[f ^ r]]], e ^= $[$[e]]) : _ = e = 1 } }(), $Q = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], $V = $L.AES = $X.extend({ _doReset: function () { if (!this._nRounds || this._keyPriorReset !== this._key) { for (var $ = this._keyPriorReset = this._key, x = $.words, _ = $.sigBytes / 4, e = ((this._nRounds = _ + 6) + 1) * 4, t = this._keySchedule = [], r = 0; r < e; r++)if (r < _) t[r] = x[r]; else { var i = t[r - 1]; r % _ ? _ > 6 && r % _ == 4 && (i = $j[i >>> 24] << 24 | $j[i >>> 16 & 255] << 16 | $j[i >>> 8 & 255] << 8 | $j[255 & i]) : (i = $j[(i = i << 8 | i >>> 24) >>> 24] << 24 | $j[i >>> 16 & 255] << 16 | $j[i >>> 8 & 255] << 8 | $j[255 & i], i ^= $Q[r / _ | 0] << 24), t[r] = t[r - _] ^ i } for (var f = this._invKeySchedule = [], n = 0; n < e; n++) { var r = e - n; if (n % 4) var i = t[r]; else var i = t[r - 4]; n < 4 || r <= 4 ? f[n] = i : f[n] = $q[$j[i >>> 24]] ^ $G[$j[i >>> 16 & 255]] ^ $J[$j[i >>> 8 & 255]] ^ $9[$j[255 & i]] } } }, encryptBlock: function ($, x) { this._doCryptBlock($, x, this._keySchedule, $U, $N, $T, $Z, $j) }, decryptBlock: function ($, x) { var _ = $[x + 1]; $[x + 1] = $[x + 3], $[x + 3] = _, this._doCryptBlock($, x, this._invKeySchedule, $q, $G, $J, $9, $I); var _ = $[x + 1]; $[x + 1] = $[x + 3], $[x + 3] = _ }, _doCryptBlock: function ($, x, _, e, t, r, i, f) { for (var n = this._nRounds, c = $[x] ^ _[0], a = $[x + 1] ^ _[1], o = $[x + 2] ^ _[2], s = $[x + 3] ^ _[3], h = 4, d = 1; d < n; d++) { var l = e[c >>> 24] ^ t[a >>> 16 & 255] ^ r[o >>> 8 & 255] ^ i[255 & s] ^ _[h++], u = e[a >>> 24] ^ t[o >>> 16 & 255] ^ r[s >>> 8 & 255] ^ i[255 & c] ^ _[h++], v = e[o >>> 24] ^ t[s >>> 16 & 255] ^ r[c >>> 8 & 255] ^ i[255 & a] ^ _[h++], p = e[s >>> 24] ^ t[c >>> 16 & 255] ^ r[a >>> 8 & 255] ^ i[255 & o] ^ _[h++]; c = l, a = u, o = v, s = p } var l = (f[c >>> 24] << 24 | f[a >>> 16 & 255] << 16 | f[o >>> 8 & 255] << 8 | f[255 & s]) ^ _[h++], u = (f[a >>> 24] << 24 | f[o >>> 16 & 255] << 16 | f[s >>> 8 & 255] << 8 | f[255 & c]) ^ _[h++], v = (f[o >>> 24] << 24 | f[s >>> 16 & 255] << 16 | f[c >>> 8 & 255] << 8 | f[255 & a]) ^ _[h++], p = (f[s >>> 24] << 24 | f[c >>> 16 & 255] << 16 | f[a >>> 8 & 255] << 8 | f[255 & o]) ^ _[h++]; $[x] = l, $[x + 1] = u, $[x + 2] = v, $[x + 3] = p }, keySize: 8 }), $K.AES = $X._createHelper($V), !function () { var $ = xx, x = $.lib, _ = x.WordArray, e = x.BlockCipher, t = $.algo, r = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4], i = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32], f = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28], n = [{ 0: 8421888, 268435456: 32768, 536870912: 8421378, 805306368: 2, 1073741824: 512, 1342177280: 8421890, 1610612736: 8389122, 1879048192: 8388608, 2147483648: 514, 2415919104: 8389120, 2684354560: 33280, 2952790016: 8421376, 3221225472: 32770, 3489660928: 8388610, 3758096384: 0, 4026531840: 33282, 134217728: 0, 402653184: 8421890, 671088640: 33282, 939524096: 32768, 1207959552: 8421888, 1476395008: 512, 1744830464: 8421378, 2013265920: 2, 2281701376: 8389120, 2550136832: 33280, 2818572288: 8421376, 3087007744: 8389122, 3355443200: 8388610, 3623878656: 32770, 3892314112: 514, 4160749568: 8388608, 1: 32768, 268435457: 2, 536870913: 8421888, 805306369: 8388608, 1073741825: 8421378, 1342177281: 33280, 1610612737: 512, 1879048193: 8389122, 2147483649: 8421890, 2415919105: 8421376, 2684354561: 8388610, 2952790017: 33282, 3221225473: 514, 3489660929: 8389120, 3758096385: 32770, 4026531841: 0, 134217729: 8421890, 402653185: 8421376, 671088641: 8388608, 939524097: 512, 1207959553: 32768, 1476395009: 8388610, 1744830465: 2, 2013265921: 33282, 2281701377: 32770, 2550136833: 8389122, 2818572289: 514, 3087007745: 8421888, 3355443201: 8389120, 3623878657: 0, 3892314113: 33280, 4160749569: 8421378 }, { 0: 1074282512, 16777216: 16384, 33554432: 524288, 50331648: 1074266128, 67108864: 1073741840, 83886080: 1074282496, 100663296: 1073758208, 117440512: 16, 134217728: 540672, 150994944: 1073758224, 167772160: 1073741824, 184549376: 540688, 201326592: 524304, 218103808: 0, 234881024: 16400, 251658240: 1074266112, 8388608: 1073758208, 25165824: 540688, 41943040: 16, 58720256: 1073758224, 75497472: 1074282512, 92274688: 1073741824, 109051904: 524288, 125829120: 1074266128, 142606336: 524304, 159383552: 0, 176160768: 16384, 192937984: 1074266112, 209715200: 1073741840, 226492416: 540672, 243269632: 1074282496, 260046848: 16400, 268435456: 0, 285212672: 1074266128, 301989888: 1073758224, 318767104: 1074282496, 335544320: 1074266112, 352321536: 16, 369098752: 540688, 385875968: 16384, 402653184: 16400, 419430400: 524288, 436207616: 524304, 452984832: 1073741840, 469762048: 540672, 486539264: 1073758208, 503316480: 1073741824, 520093696: 1074282512, 276824064: 540688, 293601280: 524288, 310378496: 1074266112, 327155712: 16384, 343932928: 1073758208, 360710144: 1074282512, 377487360: 16, 394264576: 1073741824, 411041792: 1074282496, 427819008: 1073741840, 444596224: 1073758224, 461373440: 524304, 478150656: 0, 494927872: 16400, 511705088: 1074266128, 528482304: 540672 }, { 0: 260, 1048576: 0, 2097152: 67109120, 3145728: 65796, 4194304: 65540, 5242880: 67108868, 6291456: 67174660, 7340032: 67174400, 8388608: 67108864, 9437184: 67174656, 10485760: 65792, 11534336: 67174404, 12582912: 67109124, 13631488: 65536, 14680064: 4, 15728640: 256, 524288: 67174656, 1572864: 67174404, 2621440: 0, 3670016: 67109120, 4718592: 67108868, 5767168: 65536, 6815744: 65540, 7864320: 260, 8912896: 4, 9961472: 256, 11010048: 67174400, 12058624: 65796, 13107200: 65792, 14155776: 67109124, 15204352: 67174660, 16252928: 67108864, 16777216: 67174656, 17825792: 65540, 18874368: 65536, 19922944: 67109120, 20971520: 256, 22020096: 67174660, 23068672: 67108868, 24117248: 0, 25165824: 67109124, 26214400: 67108864, 27262976: 4, 28311552: 65792, 29360128: 67174400, 30408704: 260, 31457280: 65796, 32505856: 67174404, 17301504: 67108864, 18350080: 260, 19398656: 67174656, 20447232: 0, 21495808: 65540, 22544384: 67109120, 23592960: 256, 24641536: 67174404, 25690112: 65536, 26738688: 67174660, 27787264: 65796, 28835840: 67108868, 29884416: 67109124, 30932992: 67174400, 31981568: 4, 33030144: 65792 }, { 0: 2151682048, 65536: 2147487808, 131072: 4198464, 196608: 2151677952, 262144: 0, 327680: 4198400, 393216: 2147483712, 458752: 4194368, 524288: 2147483648, 589824: 4194304, 655360: 64, 720896: 2147487744, 786432: 2151678016, 851968: 4160, 917504: 4096, 983040: 2151682112, 32768: 2147487808, 98304: 64, 163840: 2151678016, 229376: 2147487744, 294912: 4198400, 360448: 2151682112, 425984: 0, 491520: 2151677952, 557056: 4096, 622592: 2151682048, 688128: 4194304, 753664: 4160, 819200: 2147483648, 884736: 4194368, 950272: 4198464, 1015808: 2147483712, 1048576: 4194368, 1114112: 4198400, 1179648: 2147483712, 1245184: 0, 1310720: 4160, 1376256: 2151678016, 1441792: 2151682048, 1507328: 2147487808, 1572864: 2151682112, 1638400: 2147483648, 1703936: 2151677952, 1769472: 4198464, 1835008: 2147487744, 1900544: 4194304, 1966080: 64, 2031616: 4096, 1081344: 2151677952, 1146880: 2151682112, 1212416: 0, 1277952: 4198400, 1343488: 4194368, 1409024: 2147483648, 1474560: 2147487808, 1540096: 64, 1605632: 2147483712, 1671168: 4096, 1736704: 2147487744, 1802240: 2151678016, 1867776: 4160, 1933312: 2151682048, 1998848: 4194304, 2064384: 4198464 }, { 0: 128, 4096: 17039360, 8192: 262144, 12288: 536870912, 16384: 537133184, 20480: 16777344, 24576: 553648256, 28672: 262272, 32768: 16777216, 36864: 537133056, 40960: 536871040, 45056: 553910400, 49152: 553910272, 53248: 0, 57344: 17039488, 61440: 553648128, 2048: 17039488, 6144: 553648256, 10240: 128, 14336: 17039360, 18432: 262144, 22528: 537133184, 26624: 553910272, 30720: 536870912, 34816: 537133056, 38912: 0, 43008: 553910400, 47104: 16777344, 51200: 536871040, 55296: 553648128, 59392: 16777216, 63488: 262272, 65536: 262144, 69632: 128, 73728: 536870912, 77824: 553648256, 81920: 16777344, 86016: 553910272, 90112: 537133184, 94208: 16777216, 98304: 553910400, 102400: 553648128, 106496: 17039360, 110592: 537133056, 114688: 262272, 118784: 536871040, 122880: 0, 126976: 17039488, 67584: 553648256, 71680: 16777216, 75776: 17039360, 79872: 537133184, 83968: 536870912, 88064: 17039488, 92160: 128, 96256: 553910272, 100352: 262272, 104448: 553910400, 108544: 0, 112640: 553648128, 116736: 16777344, 120832: 262144, 124928: 537133056, 129024: 536871040 }, { 0: 268435464, 256: 8192, 512: 270532608, 768: 270540808, 1024: 268443648, 1280: 2097152, 1536: 2097160, 1792: 268435456, 2048: 0, 2304: 268443656, 2560: 2105344, 2816: 8, 3072: 270532616, 3328: 2105352, 3584: 8200, 3840: 270540800, 128: 270532608, 384: 270540808, 640: 8, 896: 2097152, 1152: 2105352, 1408: 268435464, 1664: 268443648, 1920: 8200, 2176: 2097160, 2432: 8192, 2688: 268443656, 2944: 270532616, 3200: 0, 3456: 270540800, 3712: 2105344, 3968: 268435456, 4096: 268443648, 4352: 270532616, 4608: 270540808, 4864: 8200, 5120: 2097152, 5376: 268435456, 5632: 268435464, 5888: 2105344, 6144: 2105352, 6400: 0, 6656: 8, 6912: 270532608, 7168: 8192, 7424: 268443656, 7680: 270540800, 7936: 2097160, 4224: 8, 4480: 2105344, 4736: 2097152, 4992: 268435464, 5248: 268443648, 5504: 8200, 5760: 270540808, 6016: 270532608, 6272: 270540800, 6528: 270532616, 6784: 8192, 7040: 2105352, 7296: 2097160, 7552: 0, 7808: 268435456, 8064: 268443656 }, { 0: 1048576, 16: 33555457, 32: 1024, 48: 1049601, 64: 34604033, 80: 0, 96: 1, 112: 34603009, 128: 33555456, 144: 1048577, 160: 33554433, 176: 34604032, 192: 34603008, 208: 1025, 224: 1049600, 240: 33554432, 8: 34603009, 24: 0, 40: 33555457, 56: 34604032, 72: 1048576, 88: 33554433, 104: 33554432, 120: 1025, 136: 1049601, 152: 33555456, 168: 34603008, 184: 1048577, 200: 1024, 216: 34604033, 232: 1, 248: 1049600, 256: 33554432, 272: 1048576, 288: 33555457, 304: 34603009, 320: 1048577, 336: 33555456, 352: 34604032, 368: 1049601, 384: 1025, 400: 34604033, 416: 1049600, 432: 1, 448: 0, 464: 34603008, 480: 33554433, 496: 1024, 264: 1049600, 280: 33555457, 296: 34603009, 312: 1, 328: 33554432, 344: 1048576, 360: 1025, 376: 34604032, 392: 33554433, 408: 34603008, 424: 0, 440: 34604033, 456: 1049601, 472: 1024, 488: 33555456, 504: 1048577 }, { 0: 134219808, 1: 131072, 2: 134217728, 3: 32, 4: 131104, 5: 134350880, 6: 134350848, 7: 2048, 8: 134348800, 9: 134219776, 10: 133120, 11: 134348832, 12: 2080, 13: 0, 14: 134217760, 15: 133152, 2147483648: 2048, 2147483649: 134350880, 2147483650: 134219808, 2147483651: 134217728, 2147483652: 134348800, 2147483653: 133120, 2147483654: 133152, 2147483655: 32, 2147483656: 134217760, 2147483657: 2080, 2147483658: 131104, 2147483659: 134350848, 2147483660: 0, 2147483661: 134348832, 2147483662: 134219776, 2147483663: 131072, 16: 133152, 17: 134350848, 18: 32, 19: 2048, 20: 134219776, 21: 134217760, 22: 134348832, 23: 131072, 24: 0, 25: 131104, 26: 134348800, 27: 134219808, 28: 134350880, 29: 133120, 30: 2080, 31: 134217728, 2147483664: 131072, 2147483665: 2048, 2147483666: 134348832, 2147483667: 133152, 2147483668: 32, 2147483669: 134348800, 2147483670: 134217728, 2147483671: 134219808, 2147483672: 134350880, 2147483673: 134217760, 2147483674: 134219776, 2147483675: 0, 2147483676: 133120, 2147483677: 2080, 2147483678: 131104, 2147483679: 134350848 }], c = [4160749569, 528482304, 33030144, 2064384, 129024, 8064, 504, 2147483679], a = t.DES = e.extend({ _doReset: function () { for (var $ = this._key.words, x = [], _ = 0; _ < 56; _++) { var e = r[_] - 1; x[_] = $[e >>> 5] >>> 31 - e % 32 & 1 } for (var t = this._subKeys = [], n = 0; n < 16; n++) { for (var c = t[n] = [], a = f[n], _ = 0; _ < 24; _++)c[_ / 6 | 0] |= x[(i[_] - 1 + a) % 28] << 31 - _ % 6, c[4 + (_ / 6 | 0)] |= x[28 + (i[_ + 24] - 1 + a) % 28] << 31 - _ % 6; c[0] = c[0] << 1 | c[0] >>> 31; for (var _ = 1; _ < 7; _++)c[_] = c[_] >>> (_ - 1) * 4 + 3; c[7] = c[7] << 5 | c[7] >>> 27 } for (var o = this._invSubKeys = [], _ = 0; _ < 16; _++)o[_] = t[15 - _] }, encryptBlock: function ($, x) { this._doCryptBlock($, x, this._subKeys) }, decryptBlock: function ($, x) { this._doCryptBlock($, x, this._invSubKeys) }, _doCryptBlock: function ($, x, _) { this._lBlock = $[x], this._rBlock = $[x + 1], o.call(this, 4, 252645135), o.call(this, 16, 65535), s.call(this, 2, 858993459), s.call(this, 8, 16711935), o.call(this, 1, 1431655765); for (var e = 0; e < 16; e++) { for (var t = _[e], r = this._lBlock, i = this._rBlock, f = 0, a = 0; a < 8; a++)f |= n[a][((i ^ t[a]) & c[a]) >>> 0]; this._lBlock = i, this._rBlock = r ^ f } var h = this._lBlock; this._lBlock = this._rBlock, this._rBlock = h, o.call(this, 1, 1431655765), s.call(this, 8, 16711935), s.call(this, 2, 858993459), o.call(this, 16, 65535), o.call(this, 4, 252645135), $[x] = this._lBlock, $[x + 1] = this._rBlock }, keySize: 2, ivSize: 2, blockSize: 2 }); function o($, x) { var _ = (this._lBlock >>> $ ^ this._rBlock) & x; this._rBlock ^= _, this._lBlock ^= _ << $ } function s($, x) { var _ = (this._rBlock >>> $ ^ this._lBlock) & x; this._lBlock ^= _, this._rBlock ^= _ << $ } $.DES = e._createHelper(a); var h = t.TripleDES = e.extend({ _doReset: function () { var $ = this._key.words; this._des1 = a.createEncryptor(_.create($.slice(0, 2))), this._des2 = a.createEncryptor(_.create($.slice(2, 4))), this._des3 = a.createEncryptor(_.create($.slice(4, 6))) }, encryptBlock: function ($, x) { this._des1.encryptBlock($, x), this._des2.decryptBlock($, x), this._des3.encryptBlock($, x) }, decryptBlock: function ($, x) { this._des3.decryptBlock($, x), this._des2.encryptBlock($, x), this._des1.decryptBlock($, x) }, keySize: 6, ivSize: 2, blockSize: 2 }); $.TripleDES = e._createHelper(h) }(), !function () { var $ = xx, x = $.lib.StreamCipher, _ = $.algo, e = _.RC4 = x.extend({ _doReset: function () { for (var $ = this._key, x = $.words, _ = $.sigBytes, e = this._S = [], t = 0; t < 256; t++)e[t] = t; for (var t = 0, r = 0; t < 256; t++) { var i = t % _, f = x[i >>> 2] >>> 24 - i % 4 * 8 & 255; r = (r + e[t] + f) % 256; var n = e[t]; e[t] = e[r], e[r] = n } this._i = this._j = 0 }, _doProcessBlock: function ($, x) { $[x] ^= t.call(this) }, keySize: 8, ivSize: 0 }); function t() { for (var $ = this._S, x = this._i, _ = this._j, e = 0, t = 0; t < 4; t++) { _ = (_ + $[x = (x + 1) % 256]) % 256; var r = $[x]; $[x] = $[_], $[_] = r, e |= $[($[x] + $[_]) % 256] << 24 - 8 * t } return this._i = x, this._j = _, e } $.RC4 = x._createHelper(e); var r = _.RC4Drop = e.extend({ cfg: e.cfg.extend({ drop: 192 }), _doReset: function () { e._doReset.call(this); for (var $ = this.cfg.drop; $ > 0; $--)t.call(this) } }); $.RC4Drop = x._createHelper(r) }(), xx.mode.CTRGladman = function () { var $ = xx.lib.BlockCipherMode.extend(); function x($) { if (($ >> 24 & 255) == 255) { var x = $ >> 16 & 255, _ = $ >> 8 & 255, e = 255 & $; 255 === x ? (x = 0, 255 === _ ? (_ = 0, 255 === e ? e = 0 : ++e) : ++_) : ++x, $ = 0, $ += x << 16, $ += _ << 8, $ += e } else $ += 16777216; return $ } var _ = $.Encryptor = $.extend({ processBlock: function ($, _) { var e, t = this._cipher, r = t.blockSize, i = this._iv, f = this._counter; i && (f = this._counter = i.slice(0), this._iv = void 0), 0 === ((e = f)[0] = x(e[0])) && (e[1] = x(e[1])); var n = f.slice(0); t.encryptBlock(n, 0); for (var c = 0; c < r; c++)$[_ + c] ^= n[c] } }); return $.Decryptor = _, $ }(), !function () { var $ = xx, x = $.lib.StreamCipher, _ = $.algo, e = [], t = [], r = [], i = _.Rabbit = x.extend({ _doReset: function () { for (var $ = this._key.words, x = this.cfg.iv, _ = 0; _ < 4; _++)$[_] = ($[_] << 8 | $[_] >>> 24) & 16711935 | ($[_] << 24 | $[_] >>> 8) & 4278255360; var e = this._X = [$[0], $[3] << 16 | $[2] >>> 16, $[1], $[0] << 16 | $[3] >>> 16, $[2], $[1] << 16 | $[0] >>> 16, $[3], $[2] << 16 | $[1] >>> 16], t = this._C = [$[2] << 16 | $[2] >>> 16, 4294901760 & $[0] | 65535 & $[1], $[3] << 16 | $[3] >>> 16, 4294901760 & $[1] | 65535 & $[2], $[0] << 16 | $[0] >>> 16, 4294901760 & $[2] | 65535 & $[3], $[1] << 16 | $[1] >>> 16, 4294901760 & $[3] | 65535 & $[0]]; this._b = 0; for (var _ = 0; _ < 4; _++)f.call(this); for (var _ = 0; _ < 8; _++)t[_] ^= e[_ + 4 & 7]; if (x) { var r = x.words, i = r[0], n = r[1], c = (i << 8 | i >>> 24) & 16711935 | (i << 24 | i >>> 8) & 4278255360, a = (n << 8 | n >>> 24) & 16711935 | (n << 24 | n >>> 8) & 4278255360, o = c >>> 16 | 4294901760 & a, s = a << 16 | 65535 & c; t[0] ^= c, t[1] ^= o, t[2] ^= a, t[3] ^= s, t[4] ^= c, t[5] ^= o, t[6] ^= a, t[7] ^= s; for (var _ = 0; _ < 4; _++)f.call(this) } }, _doProcessBlock: function ($, x) { var _ = this._X; f.call(this), e[0] = _[0] ^ _[5] >>> 16 ^ _[3] << 16, e[1] = _[2] ^ _[7] >>> 16 ^ _[5] << 16, e[2] = _[4] ^ _[1] >>> 16 ^ _[7] << 16, e[3] = _[6] ^ _[3] >>> 16 ^ _[1] << 16; for (var t = 0; t < 4; t++)e[t] = (e[t] << 8 | e[t] >>> 24) & 16711935 | (e[t] << 24 | e[t] >>> 8) & 4278255360, $[x + t] ^= e[t] }, blockSize: 4, ivSize: 2 }); function f() { for (var $ = this._X, x = this._C, _ = 0; _ < 8; _++)t[_] = x[_]; x[0] = x[0] + 1295307597 + this._b | 0, x[1] = x[1] + 3545052371 + (x[0] >>> 0 < t[0] >>> 0 ? 1 : 0) | 0, x[2] = x[2] + 886263092 + (x[1] >>> 0 < t[1] >>> 0 ? 1 : 0) | 0, x[3] = x[3] + 1295307597 + (x[2] >>> 0 < t[2] >>> 0 ? 1 : 0) | 0, x[4] = x[4] + 3545052371 + (x[3] >>> 0 < t[3] >>> 0 ? 1 : 0) | 0, x[5] = x[5] + 886263092 + (x[4] >>> 0 < t[4] >>> 0 ? 1 : 0) | 0, x[6] = x[6] + 1295307597 + (x[5] >>> 0 < t[5] >>> 0 ? 1 : 0) | 0, x[7] = x[7] + 3545052371 + (x[6] >>> 0 < t[6] >>> 0 ? 1 : 0) | 0, this._b = x[7] >>> 0 < t[7] >>> 0 ? 1 : 0; for (var _ = 0; _ < 8; _++) { var e = $[_] + x[_], i = 65535 & e, f = e >>> 16, n = ((i * i >>> 17) + i * f >>> 15) + f * f, c = ((4294901760 & e) * e | 0) + ((65535 & e) * e | 0); r[_] = n ^ c } $[0] = r[0] + (r[7] << 16 | r[7] >>> 16) + (r[6] << 16 | r[6] >>> 16) | 0, $[1] = r[1] + (r[0] << 8 | r[0] >>> 24) + r[7] | 0, $[2] = r[2] + (r[1] << 16 | r[1] >>> 16) + (r[0] << 16 | r[0] >>> 16) | 0, $[3] = r[3] + (r[2] << 8 | r[2] >>> 24) + r[1] | 0, $[4] = r[4] + (r[3] << 16 | r[3] >>> 16) + (r[2] << 16 | r[2] >>> 16) | 0, $[5] = r[5] + (r[4] << 8 | r[4] >>> 24) + r[3] | 0, $[6] = r[6] + (r[5] << 16 | r[5] >>> 16) + (r[4] << 16 | r[4] >>> 16) | 0, $[7] = r[7] + (r[6] << 8 | r[6] >>> 24) + r[5] | 0 } $.Rabbit = x._createHelper(i) }(), xx.mode.CTR = (x$ = ($Y = xx.lib.BlockCipherMode.extend()).Encryptor = $Y.extend({ processBlock: function ($, x) { var _ = this._cipher, e = _.blockSize, t = this._iv, r = this._counter; t && (r = this._counter = t.slice(0), this._iv = void 0); var i = r.slice(0); _.encryptBlock(i, 0), r[e - 1] = r[e - 1] + 1 | 0; for (var f = 0; f < e; f++)$[x + f] ^= i[f] } }), $Y.Decryptor = x$, $Y), !function () { var $ = xx, x = $.lib.StreamCipher, _ = $.algo, e = [], t = [], r = [], i = _.RabbitLegacy = x.extend({ _doReset: function () { var $ = this._key.words, x = this.cfg.iv, _ = this._X = [$[0], $[3] << 16 | $[2] >>> 16, $[1], $[0] << 16 | $[3] >>> 16, $[2], $[1] << 16 | $[0] >>> 16, $[3], $[2] << 16 | $[1] >>> 16], e = this._C = [$[2] << 16 | $[2] >>> 16, 4294901760 & $[0] | 65535 & $[1], $[3] << 16 | $[3] >>> 16, 4294901760 & $[1] | 65535 & $[2], $[0] << 16 | $[0] >>> 16, 4294901760 & $[2] | 65535 & $[3], $[1] << 16 | $[1] >>> 16, 4294901760 & $[3] | 65535 & $[0]]; this._b = 0; for (var t = 0; t < 4; t++)f.call(this); for (var t = 0; t < 8; t++)e[t] ^= _[t + 4 & 7]; if (x) { var r = x.words, i = r[0], n = r[1], c = (i << 8 | i >>> 24) & 16711935 | (i << 24 | i >>> 8) & 4278255360, a = (n << 8 | n >>> 24) & 16711935 | (n << 24 | n >>> 8) & 4278255360, o = c >>> 16 | 4294901760 & a, s = a << 16 | 65535 & c; e[0] ^= c, e[1] ^= o, e[2] ^= a, e[3] ^= s, e[4] ^= c, e[5] ^= o, e[6] ^= a, e[7] ^= s; for (var t = 0; t < 4; t++)f.call(this) } }, _doProcessBlock: function ($, x) { var _ = this._X; f.call(this), e[0] = _[0] ^ _[5] >>> 16 ^ _[3] << 16, e[1] = _[2] ^ _[7] >>> 16 ^ _[5] << 16, e[2] = _[4] ^ _[1] >>> 16 ^ _[7] << 16, e[3] = _[6] ^ _[3] >>> 16 ^ _[1] << 16; for (var t = 0; t < 4; t++)e[t] = (e[t] << 8 | e[t] >>> 24) & 16711935 | (e[t] << 24 | e[t] >>> 8) & 4278255360, $[x + t] ^= e[t] }, blockSize: 4, ivSize: 2 }); function f() { for (var $ = this._X, x = this._C, _ = 0; _ < 8; _++)t[_] = x[_]; x[0] = x[0] + 1295307597 + this._b | 0, x[1] = x[1] + 3545052371 + (x[0] >>> 0 < t[0] >>> 0 ? 1 : 0) | 0, x[2] = x[2] + 886263092 + (x[1] >>> 0 < t[1] >>> 0 ? 1 : 0) | 0, x[3] = x[3] + 1295307597 + (x[2] >>> 0 < t[2] >>> 0 ? 1 : 0) | 0, x[4] = x[4] + 3545052371 + (x[3] >>> 0 < t[3] >>> 0 ? 1 : 0) | 0, x[5] = x[5] + 886263092 + (x[4] >>> 0 < t[4] >>> 0 ? 1 : 0) | 0, x[6] = x[6] + 1295307597 + (x[5] >>> 0 < t[5] >>> 0 ? 1 : 0) | 0, x[7] = x[7] + 3545052371 + (x[6] >>> 0 < t[6] >>> 0 ? 1 : 0) | 0, this._b = x[7] >>> 0 < t[7] >>> 0 ? 1 : 0; for (var _ = 0; _ < 8; _++) { var e = $[_] + x[_], i = 65535 & e, f = e >>> 16, n = ((i * i >>> 17) + i * f >>> 15) + f * f, c = ((4294901760 & e) * e | 0) + ((65535 & e) * e | 0); r[_] = n ^ c } $[0] = r[0] + (r[7] << 16 | r[7] >>> 16) + (r[6] << 16 | r[6] >>> 16) | 0, $[1] = r[1] + (r[0] << 8 | r[0] >>> 24) + r[7] | 0, $[2] = r[2] + (r[1] << 16 | r[1] >>> 16) + (r[0] << 16 | r[0] >>> 16) | 0, $[3] = r[3] + (r[2] << 8 | r[2] >>> 24) + r[1] | 0, $[4] = r[4] + (r[3] << 16 | r[3] >>> 16) + (r[2] << 16 | r[2] >>> 16) | 0, $[5] = r[5] + (r[4] << 8 | r[4] >>> 24) + r[3] | 0, $[6] = r[6] + (r[5] << 16 | r[5] >>> 16) + (r[4] << 16 | r[4] >>> 16) | 0, $[7] = r[7] + (r[6] << 8 | r[6] >>> 24) + r[5] | 0 } $.RabbitLegacy = x._createHelper(i) }(), xx.pad.ZeroPadding = { pad: function ($, x) { var _ = 4 * x; $.clamp(), $.sigBytes += _ - ($.sigBytes % _ || _) }, unpad: function ($) { for (var x = $.words, _ = $.sigBytes - 1; !(x[_ >>> 2] >>> 24 - _ % 4 * 8 & 255);)_--; $.sigBytes = _ + 1 } }, xx });

/**
 * La clase `Local` proporciona métodos para administrar datos en el almacenamiento local,
 * rastreando sus tipos.
 * 
 * @author SoDe World
 * @version 3.1.1
 * @license Todos los derechos reservados.
 */
class Local {
  /**
   * Almacén de almacenamiento local.
   * @type {Storage}
   */
  static storage = localStorage;

  static #hash = 'cff54ba3-d685-481c-9fb6-a2e5e9f78a4d'

  /**
   * Registro de los tipos de datos almacenados.
   * @type {Object.<string, string>}
   */
  static storage_types = {};

  /**
   * Tamaño máximo de fragmento en bytes para dividir los datos.
   * @type {number}
   * @private
   */
  static #MAX_CHUNK_SIZE = 4.5 * 1024 * 1024; // 4.5 MB en bytes

  /**
   * Calcula el tamaño en bytes de una cadena.
   * @param {string} string - La cadena de entrada.
   * @returns {number} - Tamaño en bytes de la cadena.
   * @private
   */
  static #bytesize(string) {
    const encoder = new TextEncoder();
    return encoder.encode(string).length;
  }

  /**
   * Divide una cadena en fragmentos más pequeños según el tamaño máximo.
   * @param {string} string - La cadena a dividir.
   * @returns {string[]} - Fragmentos de la cadena dividida.
   * @private
   */
  static #partition(string) {
    const chunks = [];
    let currentIndex = 0;
    while (currentIndex < string.length) {
      const remainingText = string.slice(currentIndex);
      const chunkSize = Math.min(this.#MAX_CHUNK_SIZE, remainingText.length);
      let chunk = remainingText.slice(0, chunkSize);
      while (this.#bytesize(chunk) > this.#MAX_CHUNK_SIZE) {
        chunk = chunk.slice(0, chunk.length - 1);
      }
      chunks.push(chunk);
      currentIndex += chunk.length;
    }
    return chunks;
  }

  /**
   * Obtiene todas las claves únicas almacenadas en el almacenamiento.
   * @returns {string[]} - Lista de claves únicas.
   * @private
   */
  static #keys() {
    return [...new Set(Object.keys(this.storage).map(key => {
      const coincidences = key.match(/^(.*?)\[/)
      if (coincidences) return coincidences[1]
      else return key
    }))];
  }

  /**
   * Almacena un valor en el almacenamiento local junto con su tipo.
   * @param {string} name - El nombre de la clave en el almacenamiento local.
   * @param {*} value - El valor que se almacenará. Se convierte a JSON antes de guardar.
   */
  static set(name, value) {
    this.delete(name)
    const value2save = CryptoJS4Storage.AES.encrypt(JSON.stringify(value), this.#hash).toString();
    this.storage_types[name] = typeof value;
    if (this.#bytesize(value2save) > this.#MAX_CHUNK_SIZE) {
      let parts = this.#partition(value2save);
      parts.forEach((part, i) => {
        this.storage.setItem(`${name}[${i}]`, part);
      });
    } else {
      this.storage.setItem(name, value2save);
    }
    this.saveStorageTypes();
  }

  /**
   * Obtiene un valor del almacenamiento local y lo decodifica.
   * @param {string} name - El nombre de la clave en el almacenamiento local.
   * @returns {string} - Valor decodificado.
   * @private
   */
  static #get(name) {
    let keys = Object.keys(this.storage).map(key => {
      if (key === name) return {
        position: 0,
        value: this.storage.getItem(name)
      };
      else if (key.startsWith(`${name}[`)) return {
        position: key.replace(/.*\[(\d+)\]/, '$1'),
        value: this.storage.getItem(key)
      };
    }).filter(Boolean);
    let values = keys.sort((a, b) => a.position - b.position).map(x => x.value);
    return values.join('');
  }

  /**
   * Recupera un valor del almacenamiento local, convirtiéndolo al tipo adecuado.
   * @param {string} name - El nombre de la clave en el almacenamiento local.
   * @returns {*} - El valor almacenado en el tipo correspondiente.
   */
  static get(name) {
    if (!this.#keys().includes(name)) return;
    let valueencoded = this.#get(name);
    let valuedecoded;
    try {
      valuedecoded = CryptoJS4Storage.AES.decrypt(valueencoded, this.#hash).toString(CryptoJS4Storage.enc.Utf8);
    } catch (e) { }
    const value = JSON.parse(valuedecoded);
    const type = this.storage_types[name];
    switch (type) {
      case "boolean":
        return Boolean(value);
      case "number":
        return Number(value);
      case "string":
        return String(value);
      case "object":
        return value;
      default:
        return value;
    }
  }

  /**
   * Recupera todos los pares clave-valor del almacenamiento local como un objeto.
   * @returns {Object} - Objeto que contiene todos los pares clave-valor almacenados.
   */
  static getAll() {
    const result = {};
    this.#keys().forEach(key => {
      if (key !== 'storage_types') {
        const value = this.get(key);
        result[key] = value;
      }
    });
    return result;
  }

  /**
   * Elimina un elemento del almacenamiento local y su tipo asociado.
   * @param {string} name - El nombre de la clave en el almacenamiento local.
   */
  static delete(name) {
    Object.keys(this.storage).forEach(key => {
      if (
        key === name ||
        key.startsWith(`${name}[`)
      ) this.storage.removeItem(key)
    })
    delete this.storage_types[name];
    this.saveStorageTypes();
  }

  /**
   * Limpia todo el almacenamiento local y los tipos asociados.
   */
  static destroy() {
    this.storage.clear();
    this.storage_types = {};
    this.saveStorageTypes();
  }

  /**
   * Guarda los tipos de almacenamiento local en el almacenamiento local del navegador.
   */
  static saveStorageTypes() {
    this.storage.setItem("storage_types", JSON.stringify(this.storage_types));
  }
}

/**
 * La clase `Session` extiende la clase `Local` para trabajar con el almacenamiento de sesión.
 */
class Session extends Local {
  /**
   * Almacén de almacenamiento de sesión.
   * @type {Storage}
   */
  static storage = sessionStorage;
}

// Cargar los tipos de almacenamiento previamente guardados en el almacenamiento local y de sesión.
Local.storage_types = JSON.parse(localStorage.getItem("storage_types")) || {};
Session.storage_types = JSON.parse(sessionStorage.getItem("storage_types")) || {};